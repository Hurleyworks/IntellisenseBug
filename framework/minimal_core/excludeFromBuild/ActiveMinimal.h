// This header file was auto-generated by ClassMate++
// Created: 16 Sep 2017 12:15:26 pm
// Copyright (c) 2017, HurleyWorks

#pragma once

class Minimal; // forward decl for impl

class ActiveMinimal
{
    // The Active Object design pattern decouples method execution from
    // method invocation to enhance concurrency and simplify synchronized
    // access to an object that resides in its own thread of control.

 public:
    ActiveMinimal();
    ~ActiveMinimal();

 private:
    std::unique_ptr<Minimal> impl;

    size_t frameNumber = 0;

    // state functions
    std::thread stateThread;
    void (ActiveMinimal::*state)();

    // state thread function
    void executeState();
    void start();
    void onTick();
    void waitingForMessages();
    void init();

    bool shutdown = false;

}; // end class ActiveMinimal
